{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo \u00e0 Documenta\u00e7\u00e3o do Projeto de Automa\u00e7\u00e3o de Dados","text":"<p>Este projeto visa automatizar a atualiza\u00e7\u00e3o e consolida\u00e7\u00e3o de datasets atrav\u00e9s de processos robustos de ajuste de colunas booleanas e num\u00e9ricas. Nosso objetivo \u00e9 simplificar a prepara\u00e7\u00e3o de dados, garantindo que suas an\u00e1lises sejam sempre baseadas em informa\u00e7\u00f5es consistentes e atualizadas.</p>"},{"location":"#visao-geral-do-projeto","title":"Vis\u00e3o Geral do Projeto","text":"<p>O sistema \u00e9 modular e projetado para efici\u00eancia:</p> <ol> <li>Ajuste de Colunas Booleanas: Trata e padroniza dados bin\u00e1rios (verdadeiro/falso).</li> <li>Ajuste de Colunas Num\u00e9ricas: Prepara e combina dados quantitativos.</li> <li>Atualiza\u00e7\u00e3o do Dataset Principal: Integra os dados processados para gerar os datasets finais.</li> </ol> <p>Explore os links na barra lateral para entender cada parte do projeto em detalhes, incluindo como cada script funciona e como executar a automa\u00e7\u00e3o completa.</p>"},{"location":"#por-que-este-projeto","title":"Por Que Este Projeto?","text":"<p>No mundo da an\u00e1lise de dados, a qualidade e a consist\u00eancia das informa\u00e7\u00f5es s\u00e3o cruciais. Este projeto resolve os desafios comuns de:</p> <ul> <li>Padroniza\u00e7\u00e3o de Dados: Garante que valores booleanos e num\u00e9ricos estejam sempre no formato correto.</li> <li>Automa\u00e7\u00e3o: Reduz a necessidade de interven\u00e7\u00e3o manual, economizando tempo e minimizando erros.</li> <li>Confiabilidade: Fornece datasets atualizados e prontos para uso, facilitando relat\u00f3rios e tomadas de decis\u00e3o.</li> </ul> <p>Esperamos que esta documenta\u00e7\u00e3o seja seu guia completo para aproveitar ao m\u00e1ximo as funcionalidades do projeto!</p>"},{"location":"#autor-e-contato","title":"Autor e Contato","text":"<p>Se voc\u00ea tiver d\u00favidas, sugest\u00f5es ou precisar de suporte, sinta-se \u00e0 vontade para entrar em contato.</p> <p>Autor: Bruno Souza da Costa</p> <p>E-mail: brun.souz4@gmail.com</p> <p>LinkedIn: Bruno Souza</p> <p>Github: BruninSouza</p>"},{"location":"ajuste-colunas-booleanas/","title":"M\u00f3dulo de Ajuste de Colunas Booleanas","text":"<p>O m\u00f3dulo Ajuste de Colunas Booleanas \u00e9 fundamental para garantir a consist\u00eancia de dados que representam estados bin\u00e1rios (como \"Presente/Faltando\" e \"Sim/N\u00e3o). Ele automatiza a leitura, filtragem, normaliza\u00e7\u00e3o e combina\u00e7\u00e3o dessas colunas.</p>"},{"location":"ajuste-colunas-booleanas/#como-funciona","title":"Como Funciona","text":"<p>Os scripts  deste m\u00f3dulo (localizados em <code>Ajuste-Colunas-Booleanas/codigos/</code>), s\u00e3o divididos em dois tipos de scripts, cada um realiza uma etapa do processos distintos, s\u00e3o eles:</p>"},{"location":"ajuste-colunas-booleanas/#scripts-de-criacao-de-colunas","title":"Scripts de cria\u00e7\u00e3o de colunas","text":"<p>Os scripts Python (<code>.py</code>) enumerados de 01 \u00e0 15 localizados em <code>Atualizar-Dataset/codigos/</code> orquestram as seguintes a\u00e7\u00f5es:</p> <ol> <li>Leitura do Arquivo de Texto: O script abre um arquivo de texto espec\u00edfico (definido como <code>nome_do_arquivo</code> no exemplo, mas que deve ser substitu\u00eddo pelo caminho real do arquivo TXT contendo as refer\u00eancias).</li> <li>Identifica\u00e7\u00e3o de Linhas com PDF: Percorre cada linha do arquivo de texto em busca da string <code>.pdf:</code>. Se a string for encontrada, o n\u00famero da linha (que precede <code>.pdf:</code>) \u00e9 extra\u00eddo e armazenado.</li> <li>Cria\u00e7\u00e3o do Arquivo CSV de Sa\u00edda: Um novo arquivo CSV \u00e9 criado (definido como <code>00_nome_coluna.csv</code> no exemplo, mas pode ser qualquer nome, entretando, \u00e9 indicado que possuam um indice no inicio do nome, pois durante a cria\u00e7\u00e3o do dataset as colunas s\u00e3o ordenadas em ordem alfab\u00e9tica).</li> <li>Escrita do Cabe\u00e7alho: A primeira linha do CSV \u00e9 definida com o nome da coluna, conforme especificado no script (<code>Nome da coluna</code>).</li> <li>Preenchimento da Coluna Booleana: O script itera por um n\u00famero predefinido de linhas (atualmente 343, mas configur\u00e1vel). Para cada linha, ele verifica se o n\u00famero da linha corresponde a uma das linhas que continham a refer\u00eancia <code>.pdf</code> no arquivo de texto original.<ul> <li>Se houver correspond\u00eancia, o valor <code>1</code> (verdadeiro) \u00e9 escrito na linha do CSV.</li> <li>Caso contr\u00e1rio, o valor <code>0</code> (falso) \u00e9 escrito.</li> </ul> </li> <li>Confirma\u00e7\u00e3o: Uma mensagem \u00e9 exibida confirmando a gera\u00e7\u00e3o bem-sucedida do arquivo CSV.</li> </ol>"},{"location":"ajuste-colunas-booleanas/#exemplo-de-codigo-cria_coluna_booleanapy","title":"Exemplo de C\u00f3digo: <code>cria_coluna_booleana.py</code>","text":"<p>A seguir, o c\u00f3digo completo do script <code>Ajuste-Colunas-Booleanas/codigos/01_matriz_achados.py</code> exemplifica a l\u00f3gica implementada nos scripts de cria\u00e7\u00e3o de colunas booleanas:</p> <pre><code>import csv\nfrom pathlib import Path\n\nprint(\"=== Iniciando processo de gerar colunas com valores booleanos... ===\\n\")\n\n# Salvando caminho para os arquivos que ser\u00e3o lidos\nscript_dir = Path(__file__).parent\nprojeto_raiz = script_dir.parent\n\n# Nome do arquivo txt de entrada e do arquivo csv de sa\u00edda\nnome_arquivo_csv = \"01_matriz_achados.csv\"\narquivo_txt = projeto_raiz / \"arquivos\" / \"resultado_matriz_achados.txt\"\narquivo_csv = projeto_raiz /'csv-gerados' / nome_arquivo_csv\n\n# Criar um conjunto para armazenar os n\u00fameros das linhas que cont\u00eam arquivos .pdf\nlinhas_com_pdf = set()\n\n# Abrir o arquivo de texto e processar cada linha para encontrar as refer\u00eancias de arquivos .pdf\nwith open(arquivo_txt, 'r') as f:\n    for linha in f:\n        if '.pdf:' in linha:\n            # Extraindo o n\u00famero da linha antes de \".pdf\"\n            numero_linha = int(linha.split('.pdf:')[0])\n            linhas_com_pdf.add(numero_linha)\n\n# Criar o arquivo CSV com 343 linhas\nwith open(arquivo_csv, 'w', newline='') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow(['Matriz de Achados?'])  # Escrever o cabe\u00e7alho na primeira linha\n    for i in range(1, 1 + 343):\n        # Escrever 1 se o n\u00famero da linha estiver no conjunto, caso contr\u00e1rio 0\n        writer.writerow([1 if i in linhas_com_pdf else 0])\n\nprint(f\"Arquivo '{nome_arquivo_csv}' gerado com sucesso!\")\n</code></pre>"},{"location":"ajuste-colunas-booleanas/#script-de-juncao-de-colunas-num-so-banco-de-dados","title":"Script de jun\u00e7\u00e3o de colunas num s\u00f3 banco de dados","text":"<p>O script <code>16_juntar-colunas.py</code> localizados em <code>Atualizar-Dataset/codigos/</code>, orquestra as seguintes a\u00e7\u00f5es:</p> <ol> <li>Listagem e Ordena\u00e7\u00e3o de Arquivos: O script primeiro encontra todos os arquivos CSV presentes na pasta <code>csv-gerados/</code> (que \u00e9 onde os CSVs individuais de colunas booleanas s\u00e3o gerados). Ele ent\u00e3o ordena esses arquivos alfabeticamente para garantir uma ordem consistente na combina\u00e7\u00e3o.</li> <li>Leitura dos Arquivos CSV: Cada arquivo CSV encontrado \u00e9 lido e transformado em um DataFrame do Pandas.</li> <li>Combina\u00e7\u00e3o de DataFrames: Todos os DataFrames individuais s\u00e3o unidos lado a lado (por colunas) em um \u00fanico DataFrame grande.</li> <li>Salvamento em XLSX: O DataFrame combinado \u00e9 salvo em um novo arquivo XLSX chamado <code>colunas_combinadas.xlsx</code> na raiz do m\u00f3dulo (<code>Ajuste-Colunas-Booleanas/</code>).</li> <li>Confirma\u00e7\u00e3o: Uma mensagem \u00e9 exibida no console confirmando que os arquivos foram combinados e convertidos com sucesso.</li> </ol>"},{"location":"ajuste-colunas-booleanas/#exemplo-de-codigo-16_juntar-colunaspy","title":"Exemplo de C\u00f3digo: <code>16_juntar-colunas.py</code>","text":"<p>A seguir, o c\u00f3digo completo do script <code>Ajuste-Colunas-Booleanas/codigos/16_juntar-colunas.py</code>, que demonstra a l\u00f3gica de combina\u00e7\u00e3o de m\u00faltiplos arquivos CSV na cria\u00e7\u00e3o de um banco de dados.</p> <pre><code>import pandas as pd \nimport glob\n\n# Lista todos os arquivos CSV na pasta csv-gerados e ordena alfabeticamente\ncaminho_arquivos = sorted(glob.glob(\"csv-gerados/*.csv\"))\n\n# Lista para armazenar cada DataFrame\ndataframes = []\n\n# Itera sobre cada arquivo CSV ordenado e adiciona ao dataframe\nfor arquivo in caminho_arquivos:\n    df = pd.read_csv(arquivo)\n    dataframes.append(df)\n\n# Junta todos os DataFrames por colunas\ndf_combined = pd.concat(dataframes, axis=1)\n\n# Salva o DataFrame combinado em um novo arquivo XLSX\ndf_combined.to_excel(\"./dataframe.xlsx\", index=False)\n\nprint(\"Arquivos combinados com sucesso em ordem alfab\u00e9tica e convertidos para XLSX!\")\n</code></pre>"},{"location":"ajuste-colunas-numericas/","title":"M\u00f3dulo de Ajuste de Colunas Num\u00e9ricas","text":"<p>O m\u00f3dulo Ajuste de Colunas Num\u00e9ricas \u00e9 crucial para consolidar dados quantitativos de diversas fontes. Ele lida com a leitura de arquivos, a convers\u00e3o de formatos e a combina\u00e7\u00e3o de colunas num\u00e9ricas, garantindo que os dados estejam prontos para c\u00e1lculos e an\u00e1lises.</p>"},{"location":"ajuste-colunas-numericas/#como-funciona","title":"Como Funciona","text":"<p>O m\u00f3dulo Ajuste de Colunas Num\u00e9ricas \u00e9 executado em tr\u00eas fases distintas para garantir a correta prepara\u00e7\u00e3o dos dados:</p>"},{"location":"ajuste-colunas-numericas/#1-padronizacao-da-coluna-id","title":"1. Padroniza\u00e7\u00e3o da Coluna 'ID'","text":"<p>A primeira etapa, executada pelo script <code>00_Preparar_Arquivos.py</code>, foca em garantir que a coluna identificadora principal em todos os arquivos de entrada tenha um nome consistente. Ele realiza os seguintes processos:</p> <ol> <li>Localiza\u00e7\u00e3o de Arquivos: O script procura por todos os arquivos <code>.xlsx</code> dentro do diret\u00f3rio <code>Ajuste-Colunas-Numericas/arquivos-xlsx/</code>.</li> <li>Processamento Individual: Para cada arquivo Excel encontrado, ele o abre e verifica a exist\u00eancia da coluna 'N\u00famero do Relat\u00f3rio'.</li> <li>Renomea\u00e7\u00e3o da Coluna: Se a coluna 'N\u00famero do Relat\u00f3rio' for encontrada, ela \u00e9 automaticamente renomeada para 'ID'. Essa padroniza\u00e7\u00e3o \u00e9 vital para que os datasets possam ser combinados corretamente nas etapas futuras.</li> <li>Salvamento das Altera\u00e7\u00f5es: O arquivo Excel modificado \u00e9 salvo de volta no mesmo local, sobrescrevendo a vers\u00e3o original com a coluna 'ID' renomeada.</li> <li>Feedback: Uma mensagem informativa \u00e9 exibida para cada arquivo, indicando se a coluna foi alterada ou se n\u00e3o foi encontrada.</li> </ol>"},{"location":"ajuste-colunas-numericas/#exemplo-de-codigo-00_preparar_arquivospy","title":"Exemplo de C\u00f3digo: <code>00_Preparar_Arquivos.py</code>","text":"<p>A seguir, o c\u00f3digo respons\u00e1vel pela padroniza\u00e7\u00e3o da coluna 'ID':</p> <pre><code>import pandas as pd\nimport os\nimport glob # Biblioteca para encontrar arquivos que correspondem a um padr\u00e3o\n\n# Define os caminhos do script e da raiz do projeto\nscript_dir = os.path.dirname(os.path.abspath(__file__))\nprojeto_raiz = os.path.dirname(script_dir) \n\n# Caminho para os arquivos XLSX brutos\ncaminho_padrao = os.path.join(projeto_raiz, 'Ajuste-Colunas-Numericas', 'arquivos-xlsx', \"*.xlsx\")\nlista_arquivos_xlsx = glob.glob(caminho_padrao)\n\nprint(\"=== Iniciando prepara\u00e7\u00e3o para formatar arquivos xlsx corretamente (Padroniza\u00e7\u00e3o de ID)... ===\")\n\n# Verificando se existem arquivos na pasta especificada\nif not lista_arquivos_xlsx:\n    print(\"\\nNenhum arquivo .xlsx foi encontrado no diret\u00f3rio especificado em 'Ajuste-Colunas-Numericas/arquivos-xlsx/'.\")\nelse:\n    print(f\"\\nEncontrados {len(lista_arquivos_xlsx)} arquivos. Iniciando verifica\u00e7\u00e3o e altera\u00e7\u00e3o...\")\n\n# Atualizando nome da coluna \"N\u00famero do Relat\u00f3rio\" para \"ID\"\nfor caminho_arquivo in lista_arquivos_xlsx:\n    try:\n        nome_arquivo = os.path.basename(caminho_arquivo)\n        df = pd.read_excel(caminho_arquivo)\n\n        if 'N\u00famero do Relat\u00f3rio' in df.columns:\n            df.rename(columns={'N\u00famero do Relat\u00f3rio': 'ID'}, inplace=True)\n            df.to_excel(caminho_arquivo, index=False) # Salva o DataFrame modificado de volta no mesmo arquivo Excel\n\n            print(f\"\u2705 Coluna 'N\u00famero do Relat\u00f3rio' alterada para 'ID' com sucesso em: '{nome_arquivo}'\")\n\n        else:\n            print(f\"\u2139\ufe0f Coluna 'N\u00famero do Relat\u00f3rio' n\u00e3o encontrada em: '{nome_arquivo}'. Nenhuma altera\u00e7\u00e3o feita na coluna ID.\")\n\n    except Exception as e:\n        print(f\"\u274c Erro ao processar o arquivo '{nome_arquivo}': {e}\")\n\nprint(\"\\nProcesso de Padroniza\u00e7\u00e3o de ID conclu\u00eddo!!\")\n</code></pre>"},{"location":"ajuste-colunas-numericas/#2-leitura-processamento-e-combinacao-de-colunas-numericas","title":"2. Leitura, Processamento e Combina\u00e7\u00e3o de Colunas Num\u00e9ricas","text":"<p>Ap\u00f3s a padroniza\u00e7\u00e3o dos IDs, os pr\u00f3ximos scripts (dos enumerados 01 at\u00e9 04) se encarregam da manipula\u00e7\u00e3o dos dados num\u00e9ricos.</p> <ol> <li> <p>Leitura de Arquivos XLSX: L\u00ea os arquivos de dados brutos do diret\u00f3rio <code>Ajuste-Colunas-Numericas/arquivos-xlsx/</code> (agora com a coluna 'ID' padronizada).</p> </li> <li> <p>Extra\u00e7\u00e3o e Limpeza: Identifica as colunas num\u00e9ricas relevantes, remove caracteres n\u00e3o num\u00e9ricos e trata valores ausentes (NaN).</p> </li> <li> <p>Convers\u00e3o de Tipo: Garante que os dados sejam convertidos para tipos num\u00e9ricos apropriados (inteiros).</p> </li> <li> <p>Combina\u00e7\u00e3o: Mescla as colunas num\u00e9ricas processadas em um \u00fanico DataFrame consolidado.</p> </li> <li> <p>Gera\u00e7\u00e3o do Dataset Final: O DataFrame final \u00e9 salvo como <code>DB.xlsx</code> na raiz do m\u00f3dulo (<code>Ajuste-Colunas-Numericas/</code>).</p> </li> </ol>"},{"location":"ajuste-colunas-numericas/#exemplo-de-codigo-01_criar_coluna_servico","title":"Exemplo de C\u00f3digo: <code>01_Criar_Coluna_Servico</code>","text":"<p>A seguir, um exemplo de como o c\u00f3digo para a gera\u00e7\u00e3o de colunas num\u00e9ricas, como a transforma\u00e7\u00e3o da coluna \"Servi\u00e7o\", pode ser estruturado.</p> <pre><code>import pandas as pd\nimport os\n\n# Define os caminhos do script e da raiz do projeto\nscript_dir = os.path.dirname(os.path.abspath(__file__))\nprojeto_raiz = os.path.dirname(script_dir) # Sobe um n\u00edvel para a raiz do projeto\n\n# Define os caminhos completos para os arquivos de entrada e sa\u00edda\n# 'BD-Extens\u00e3o.xlsx' \u00e9 o arquivo original de onde os dados de servi\u00e7o ser\u00e3o lidos.\ncaminho_db_entrada = os.path.join(projeto_raiz, 'Ajuste-Colunas-Numericas', 'arquivos-xlsx', \"BD-Extens\u00e3o.xlsx\")\n\n# 'BD-Combinado.xlsx' \u00e9 o arquivo de sa\u00edda com a coluna 'Servi\u00e7o' padronizada para n\u00fameros.\ncaminho_arquivo_saida = os.path.join(projeto_raiz, 'Ajuste-Colunas-Numericas', 'arquivos-xlsx', \"BD-Combinado.xlsx\")\n\n# Mapeamento dos nomes de servi\u00e7o para siglas e, em seguida, para n\u00fameros.\n# Isso permite que os valores textuais da coluna \"Servi\u00e7o\" sejam convertidos em c\u00f3digos num\u00e9ricos.\nMAPA_NOME_PARA_SIGLA = {1: \"Avalia\u00e7\u00e3o\", 2: \"Consultoria\", 3: \"Apura\u00e7\u00e3o\"}\nmapa_para_numerico = {sigla: numero for numero, sigla in MAPA_NOME_PARA_SIGLA.items()}\n\ntry:\n    print(\"\\n=== Iniciando processo de gerar dataset com valores num\u00e9ricos... ===\")\n\n    # Carrega o DataFrame do arquivo Excel de entrada\n    df_entrada = pd.read_excel(caminho_db_entrada)\n\n    # Exibe as colunas antes da transforma\u00e7\u00e3o para depura\u00e7\u00e3o\n    print(f\"Colunas do DataFrame de entrada: {df_entrada.columns.tolist()}\")\n\n    # Verifica se a coluna \"Servi\u00e7o\" existe antes de tentar mapear\n    if \"Servi\u00e7o\" in df_entrada.columns:\n\n        # Aplica o mapeamento para converter os nomes de servi\u00e7o em n\u00fameros\n        df_entrada[\"Servi\u00e7o\"] = df_entrada[\"Servi\u00e7o\"].map(mapa_para_numerico)\n\n        # Tratar valores que n\u00e3o foram mapeados (NaN ap\u00f3s o .map())\n        df_entrada[\"Servi\u00e7o\"] = df_entrada[\"Servi\u00e7o\"].fillna(99)\n\n        # Salva o DataFrame modificado no arquivo de sa\u00edda\n        df_entrada.to_excel(caminho_arquivo_saida, index=False)\n        print(\"\u2705 Coluna 'Servi\u00e7o' Atualizada com Sucesso para valores num\u00e9ricos!!\")\n\n    else:\n        print(f\"\u2139\ufe0f Coluna 'Servi\u00e7o' n\u00e3o encontrada no arquivo '{os.path.basename(caminho_db_entrada)}'. Nenhuma altera\u00e7\u00e3o de servi\u00e7o feita.\")\n\n        # Se a coluna n\u00e3o for encontrada, ainda podemos salvar o arquivo de entrada para a pr\u00f3xima etapa\n        df_entrada.to_excel(caminho_arquivo_saida, index=False)\n\n        print(f\"Arquivo '{os.path.basename(caminho_db_entrada)}' salvo como '{os.path.basename(caminho_arquivo_saida)}' sem modifica\u00e7\u00e3o na coluna 'Servi\u00e7o'.\")\n\nexcept FileNotFoundError as e:\n    print(f\"Erro: Arquivo '{os.path.basename(caminho_db_entrada)}' n\u00e3o encontrado. Verifique se o caminho e o nome do arquivo est\u00e3o corretos. Detalhes: {e}\")\nexcept Exception as e:\n    print(f\"Ocorreu um erro inesperado durante o processamento da coluna num\u00e9rica 'Servi\u00e7o': {e}\")\n\nprint(\"\\nProcesso de gera\u00e7\u00e3o de dataset com valores num\u00e9ricos conclu\u00eddo!!\")\n</code></pre>"},{"location":"ajuste-colunas-numericas/#3-renomeacao-e-organizacao-final-das-colunas","title":"3. Renomea\u00e7\u00e3o e Organiza\u00e7\u00e3o Final das Colunas","text":"<p>Esta \u00e9 a etapa final de prepara\u00e7\u00e3o dentro do m\u00f3dulo num\u00e9rico, onde as colunas recebem seus nomes definitivos e s\u00e3o reordenadas para um layout padronizado.</p> <ol> <li> <p>Carregamento do Dataset: O script l\u00ea o arquivo <code>DB.xlsx</code>(gerado pelas etapas anteriores, com a coluna 'ID' padronizada e 'Servi\u00e7o' num\u00e9rica).</p> </li> <li> <p>Renomea\u00e7\u00e3o de Colunas: As colunas s\u00e3o renomeadas de acordo com as necessidades do projeto. Especificamente, \"T\u00edtulo\" torna-se \"Nome\" e \"Publica\u00e7\u00e3o\" torna-se \"Data\".</p> </li> <li> <p>Defini\u00e7\u00e3o da Ordem das Colunas: Uma lista predefinida (<code>colunas_organizadas</code>) especifica a ordem final desejada para as colunas no dataset.</p> </li> <li> <p>Reordena\u00e7\u00e3o do DataFrame: O DataFrame \u00e9 reordenado para corresponder \u00e0 sequ\u00eancia definida em <code>colunas_organizadas</code>, garantindo que o dataset final tenha uma estrutura consistente.</p> </li> <li> <p>Salvamento do Dataset Organizado: O DataFrame com as colunas renomeadas e organizadas \u00e9 salvo de volta no arquivo <code>DB.xlsx</code>, sobrescrevendo a vers\u00e3o anterior.</p> </li> <li> <p>Confirma\u00e7\u00e3o: Uma mensagem de sucesso \u00e9 exibida confirmando que as colunas foram renomeadas e organizadas corretamente.</p> </li> </ol>"},{"location":"ajuste-colunas-numericas/#exemplo-de-codigo-05_organizando_colunaspy","title":"Exemplo de C\u00f3digo: <code>05_Organizando_Colunas.py</code>","text":"<p>Este \u00e9 o c\u00f3digo que realiza a etapa de renomea\u00e7\u00e3o e organiza\u00e7\u00e3o das colunas:</p> <pre><code>import pandas as pd\nimport os\n\n# Define os caminhos do script e da raiz do projeto\nscript_dir = os.path.dirname(os.path.abspath(__file__))\nprojeto_raiz = os.path.dirname(script_dir)\n\n# O caminho_arquivo refere-se ao DB.xlsx final que foi gerado nas etapas anteriores.\ncaminho_arquivo = os.path.join(projeto_raiz, \"DB.xlsx\")\n\ntry:\n    # Carrega o DataFrame do arquivo DB.xlsx\n    df = pd.read_excel(caminho_arquivo)\n\n    # Renomeando Colunas para nomes adequados\n    df_renomeado = df.rename(columns={\"T\u00edtulo\": \"Nome\", \"Publica\u00e7\u00e3o\": \"Data\"})\n\n    # Define a ordem correta e as colunas esperadas no dataset final\n    colunas_organizadas = [\"ID\", \"Nome\", \"Servi\u00e7o\", \"Grupo\", \"Avalia\u00e7\u00e3o\", \"Data\", \"Ano\", \"Governo\", \"UF\"]\n\n    # Verifica se todas as colunas esperadas est\u00e3o presentes ap\u00f3s a renomea\u00e7\u00e3o\n    colunas_faltando = [col for col in colunas_organizadas if col not in df_renomeado.columns]    \n    if colunas_faltando:\n        print(f\"Aten\u00e7\u00e3o: As seguintes colunas esperadas n\u00e3o foram encontradas no DataFrame: {colunas_faltando}. Elas podem aparecer como NaN no resultado final.\")\n\n    # Seleciona e reordena as colunas. Colunas n\u00e3o listadas ser\u00e3o descartadas.\n    # Usamos .loc para garantir que a sele\u00e7\u00e3o de colunas seja feita de forma segura.\n    df_copy = df_renomeado\n    df_copy = df_copy[colunas_organizadas]\n\n    # Salva o DataFrame com as colunas renomeadas e organizadas de volta no mesmo arquivo Excel\n    df_copy.to_excel(caminho_arquivo, index=False)\n\n    print(\"\u2705Colunas Renomeadas e Organizadas com Sucesso!!\")\n\nexcept FileNotFoundError as e:\n    print(f\"Erro: Arquivo '{os.path.basename(caminho_arquivo)}' n\u00e3o encontrado. Verifique se o caminho e o nome do arquivo est\u00e3o corretos. Detalhes: {e}\")\nexcept Exception as e:\n    print(f\"Ocorreu um erro inesperado durante a renomea\u00e7\u00e3o e organiza\u00e7\u00e3o das colunas: {e}\")\n</code></pre>"},{"location":"atualizar-dataset/","title":"M\u00f3dulo de Atualiza\u00e7\u00e3o do Dataset Principal","text":"<p>O m\u00f3dulo Atualizar Dataset \u00e9 a fase final e crucial do nosso pipeline de automa\u00e7\u00e3o. Ele \u00e9 respons\u00e1vel por integrar e consolidar todos os dados processados, combinando informa\u00e7\u00f5es num\u00e9ricas e booleanas em um novo banco de dados, e ent\u00e3o atualizando o dataset principal do projeto. Este processo garante que suas an\u00e1lises e relat\u00f3rios sejam sempre baseados nas informa\u00e7\u00f5es mais recentes e abrangentes</p>"},{"location":"atualizar-dataset/#como-funciona","title":"Como Funciona","text":"<p>A pasta <code>Atualizar-Dataset/codigos/</code> possu\u00ed dois scripts, o primeiro cria um novo banco de dados com todos os dados processados at\u00e9 ent\u00e3o, e o segundo atualiza o dataset principal do projeto com os novos dados coletados. A seguir uma explica\u00e7\u00e3o mais aprofundada a cerca dos scripts: </p>"},{"location":"atualizar-dataset/#criar-dataset-com-dados-novos","title":"Criar dataset com dados novos","text":"<p>O script <code>01_Criar_DB.py</code>, localizado em <code>Atualizar-Dataset/codigos/</code>, orquestra as seguintes a\u00e7\u00f5es:</p> <ol> <li>Defini\u00e7\u00e3o de Caminhos: O script primeiro define os caminhos para os arquivos de entrada e sa\u00edda. Ele busca:<ul> <li><code>DB.xlsx</code>: O dataset contendo colunas num\u00e9ricas combinadas (gerado pelo m\u00f3dulo de Ajuste de Colunas Num\u00e9ricas).</li> <li><code>colunas_combinadas.xlsx</code>: O dataset contendo colunas booleanas combinadas (gerado pelo m\u00f3dulo de Ajuste de Colunas Booleanas).</li> <li>O arquivo de sa\u00edda <code>DB_novo.csv</code> ser\u00e1 gerado dentro da pasta <code>Atualizar-Dataset/datasets/</code>.</li> </ul> </li> <li>Carregamento dos DataFrames:: Os arquivos <code>DB.xlsx</code> e <code>colunas_combinadas.xlsx</code> s\u00e3o lidos e carregados como DataFrames do Pandas.</li> <li>Concatena\u00e7\u00e3o por Colunas: Os dois DataFrames s\u00e3o concatenados lado a lado (ou seja, por colunas). Isso significa que as colunas do dataset num\u00e9rico e as colunas do dataset booleano s\u00e3o unidas para formar um \u00fanico DataFrame abrangente.</li> <li>Salvamento do Novo Dataset: O DataFrame combinado resultante \u00e9 salvo em um novo arquivo CSV chamado <code>DB_novo.csv</code> no diret\u00f3rio <code>Atualizar-Dataset/datasets/</code>.</li> <li>Confirma\u00e7\u00e3o: Uma mensagem de sucesso \u00e9 exibida no console, indicando que o novo banco de dados foi gerado com \u00eaxito. Em caso de qualquer problema durante o processo, uma mensagem de erro ser\u00e1 exibida.</li> </ol>"},{"location":"atualizar-dataset/#exemplo-de-codigo-01_criar_dbpy","title":"Exemplo de C\u00f3digo: <code>01_Criar_DB.py</code>","text":"<p>A seguir, o c\u00f3digo completo do script <code>Atualizar-Dataset/codigos/01_Criar_DB.py</code>, que ilustra a l\u00f3gica de uni\u00e3o dos datasets.</p> <pre><code>import pandas as pd\nfrom pathlib import Path\nimport os # Necess\u00e1rio para criar diret\u00f3rios se n\u00e3o existirem\n\n# Obt\u00e9m o diret\u00f3rio do script atual e a raiz do projeto\nscript_dir = Path(__file__).parent.parent\nprojeto_raiz = script_dir.parent\n\n# Define os caminhos completos para os arquivos de entrada\ncaminho_db_a = projeto_raiz / 'Ajuste-Colunas-Numericas' / \"DB.xlsx\"\ncaminho_db_b = projeto_raiz / 'Ajuste-Colunas-Booleanas' / \"colunas_combinadas.xlsx\"\n\n# Define o caminho completo para o arquivo CSV de sa\u00edda\n# Ele ser\u00e1 salvo dentro da pasta 'datasets' do m\u00f3dulo 'Atualizar-Dataset'\ncaminho_pasta_saida = script_dir / \"datasets\"\ncaminho_arquivo_saida_csv = script_dir / \"datasets\" /\"DB_novo.csv\"\n\n# Garante que o diret\u00f3rio de sa\u00edda exista\nos.makedirs(caminho_pasta_saida, exist_ok=True)\n\ntry:\n    print(\"=== Juntando Colunas Numericas e Booleanas num s\u00f3 DB.... ===\")\n\n    # Carrega os DataFrames dos arquivos XLSX\n    db_a = pd.read_excel(caminho_db_a)\n    db_b = pd.read_excel(caminho_db_b)\n\n    # Lista de DataFrames a serem combinados\n    dataframes = [db_a, db_b]\n\n    # Concatena os DataFrames por colunas (lado a lado)\n    # Assumimos que as linhas se alinham ou que a ordem \u00e9 garantida pelos processos anteriores.\n    # Se houver necessidade de merge por chaves (ID, etc.), a l\u00f3gica aqui seria diferente (pd.merge).\n    df_combined = pd.concat(dataframes, axis=1)\n\n    # Salvando em csv\n    df_combined.to_csv(caminho_arquivo_saida_csv, index=False)\n\n    print(\"\u2705Novo Banco de Dados Gerado com Sucesso!!\")\n\nexcept Exception as e:\n    print(f\"Ocorreu um erro: {e}\")\n</code></pre>"},{"location":"atualizar-dataset/#atualizar-dataset-antigo-com-dados-novos","title":"Atualizar dataset antigo com dados novos","text":"<p>O script <code>02_Atualizar_DB.py</code>, localizado em <code>Atualizar-Dataset/codigos/</code>, executa as seguintes a\u00e7\u00f5es:</p> <ol> <li>Defini\u00e7\u00e3o de Caminhos: O script primeiro define os caminhos para os arquivos de entrada e sa\u00edda. Ele busca:<ul> <li><code>relatorios.csv</code>: O dataset \"antigo\" ou base, localizado em <code>Atualizar-Dataset/datasets/</code>.</li> <li><code>DB_novo.csv</code>: O dataset \"novo\", que cont\u00e9m as informa\u00e7\u00f5es mais recentes (gerado pelo passo anterior), tamb\u00e9m localizado em <code>Atualizar-Dataset/datasets/</code>.</li> <li>Os arquivos de sa\u00edda finais, <code>Dataset.xlsx</code> e <code>relatorios.csv</code>, ser\u00e3o gerados na raiz do projeto.</li> </ul> </li> <li>Carregamento dos DataFrames:: Os arquivos <code>relatorios.csv</code> e <code>DB_novo.csv</code> s\u00e3o lidos e carregados como DataFrames do Pandas (<code>df_a</code> e <code>df_b</code>, respectivamente).</li> <li>Remo\u00e7\u00e3o de Colunas Espec\u00edficas:: O script remove as colunas 'A\u00e7\u00e3o' e 'Filtro' do dataset <code>relatorios.csv</code> (<code>df_a</code>). Essa etapa \u00e9 crucial para padronizar o dataset antigo antes da concatena\u00e7\u00e3o.</li> <li>Concatena\u00e7\u00e3o Vertical dos DataFrames: Os dois DataFrames (<code>df_a</code> modificado e <code>df_b</code>) s\u00e3o concatenados verticalmente, ou seja, as linhas de <code>df_b</code> s\u00e3o adicionadas abaixo das linhas de <code>df_a</code>. O <code>ignore_index=True</code> garante que o \u00edndice do novo DataFrame seja reiniciado.</li> <li>Salvamento dos Datasets Finais: O DataFrame final combinado (<code>df_final</code>) \u00e9 salvo em dois formatos diferentes na raiz do projeto:<ul> <li><code>Dataset.xlsx</code>: Uma vers\u00e3o em Excel.</li> <li><code>relatorios.csv</code>: Uma vers\u00e3o em CSV, ideal para an\u00e1lises e relat\u00f3rios.</li> </ul> </li> <li>Confirma\u00e7\u00e3o: Uma mensagem de sucesso \u00e9 exibida no console, confirmando que o banco de dados foi atualizado com \u00eaxito.</li> </ol>"},{"location":"atualizar-dataset/#exemplo-de-codigo-02_atualizar_dbpy","title":"Exemplo de C\u00f3digo: <code>02_Atualizar_DB.py</code>","text":"<p>A seguir, o c\u00f3digo completo do script <code>Atualizar-Dataset/codigos/02_Atualizar_DB.py</code>, que ilustra a l\u00f3gica de uni\u00e3o e remo\u00e7\u00e3o de colunas.</p> <pre><code>import pandas as pd\nfrom pathlib import Path\n\n# Define os caminhos do script e da raiz do projeto\nscript_dir = Path(__file__).parent.parent\nprojeto_raiz = script_dir.parent\n\n# Define os caminhos para os arquivos de entrada (dentro da pasta 'datasets' do m\u00f3dulo)\ncaminho_db_a = script_dir / \"datasets\" / \"relatorios.csv\" # Dataset antigo/base\ncaminho_db_b = script_dir / \"datasets\" / \"DB_novo.csv\"    # Dataset novo, gerado no passo anterior\n\n# Define os caminhos para os arquivos de sa\u00edda (na raiz do projeto)\narquivo_saida_xlsx = projeto_raiz / \"Dataset.xlsx\"\narquivo_saida_csv = projeto_raiz / \"relatorios.csv\"\n\ntry:\n    print(\"=== Carregando datasets para atualiza\u00e7\u00e3o... ===\")\n    df_a = pd.read_csv(caminho_db_a)\n    df_b = pd.read_csv(caminho_db_b)\n\n    print(f\"Dataset 'relatorios.csv' (antigo) carregado com {len(df_a.columns)} colunas e {len(df_a)} linhas.\")\n    print(f\"Dataset 'DB_novo.csv' (novo) carregado com {len(df_b.columns)} colunas e {len(df_b)} linhas.\")\n\n    # Remove colunas espec\u00edficas do dataset antigo\n    # O 'inplace=True' modifica o DataFrame diretamente sem retornar uma c\u00f3pia\n    print(\"Removendo colunas 'A\u00e7\u00e3o' e 'Filtro' do dataset antigo...\")\n    df_a.drop(columns=['A\u00e7\u00e3o',\"Filtro\"], inplace=True) \n    print(f\"Colunas restantes no dataset antigo: {len(df_a.columns)}\")\n\n    # Agora o df_a j\u00e1 n\u00e3o tem mais as colunas \"A\u00e7\u00e3o\" e \"Filtro\"\n    print(\"\\n=== Concatenando Banco de Dados antigo com o novo... ===\")\n\n    # Concatena os DataFrames verticalmente (empilhando as linhas)\n    # ignore_index=True redefine o \u00edndice do DataFrame final\n    df_final = pd.concat([df_a, df_b], ignore_index=True)\n    print(f\"Concatena\u00e7\u00e3o conclu\u00edda. O DataFrame final possui {len(df_final)} linhas e {len(df_final.columns)} colunas.\")\n\n    # Salvando o DataFrame final em formato XLSX\n    print(f\"Salvando o Banco de Dados atualizado em '{arquivo_saida_xlsx}'...\")\n    df_final.to_excel(arquivo_saida_xlsx, index=False)\n\n    # Salvando o DataFrame final em formato CSV\n    print(f\"Salvando o Banco de Dados atualizado em '{arquivo_saida_csv}'...\")\n    df_final.to_csv(arquivo_saida_csv, index=False)\n\n    print(\"\u2705 Banco de dados Atualizado com Sucesso!!\")\n\nexcept FileNotFoundError as e:\n    print(f\"Erro: Um dos arquivos de entrada n\u00e3o foi encontrado. Verifique se eles existem nos caminhos esperados: {e}\")\nexcept KeyError as e:\n    print(f\"Erro: Uma das colunas a serem removidas n\u00e3o foi encontrada no dataset antigo: {e}\")\nexcept Exception as e:\n    print(f\"Ocorreu um erro inesperado durante a atualiza\u00e7\u00e3o do banco de dados: {e}\")\n</code></pre>"},{"location":"como-executar/","title":"Como Executar o Projeto de Automa\u00e7\u00e3o de Dados","text":"<p>Este guia detalha os passos necess\u00e1rios para configurar e executar o projeto completo de automa\u00e7\u00e3o de dados em seu ambiente local. Siga estas instru\u00e7\u00f5es cuidadosamente para garantir uma execu\u00e7\u00e3o bem-sucedida.</p>"},{"location":"como-executar/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Certifique-se de que seu sistema possui as seguintes ferramentas instaladas:</p> <ul> <li>Python 3.8+: Linguagem de programa\u00e7\u00e3o principal do projeto.<ul> <li>Verifique com: <code>python3 --version</code></li> </ul> </li> <li>pip: Gerenciador de pacotes do Python (geralmente vem com o Python).<ul> <li>Verifique com: <code>pip3 --version</code></li> </ul> </li> <li>Git: Sistema de controle de vers\u00e3o, essencial para clonar o reposit\u00f3rio.<ul> <li>Verifique com: <code>git --version</code></li> </ul> </li> </ul>"},{"location":"como-executar/#passos-para-execucao","title":"Passos para Execu\u00e7\u00e3o","text":""},{"location":"como-executar/#1-clonar-o-repositorio-do-projeto","title":"1. Clonar o Reposit\u00f3rio do Projeto","text":"<p>Abra seu terminal ou prompt de comando e clone o reposit\u00f3rio para sua m\u00e1quina local. Substitua <code>https://github.com/seu-usuario/seu-projeto.git</code> pelo URL real do seu reposit\u00f3rio.</p> <p>```bash git clone https://github.com/seu-usuario/seu-projeto.git cd seu-projeto/ # Navegue para a pasta raiz do projeto</p>"}]}